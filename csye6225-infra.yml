AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE 6225 IaC Demo
Parameters:
  VPCCidrBlock:
    Description: "CIDR block for VPC"
    Type: String
    Default: "10.1.0.0/16"
  Subnet1CidrBlock:
    Type: String
    Default: "10.1.1.0/24"
  Subnet2CidrBlock:
    Type: String
    Default: "10.1.2.0/24"
  Subnet3CidrBlock:
    Type: String
    Default: "10.1.3.0/24"
  RDSSubnet1CidrBlock:
    Type: String
    Default: "10.1.4.0/24"
  RDSSubnet2CidrBlock:
    Type: String
    Default: "10.1.5.0/24"
  RDSSubnet3CidrBlock:
    Type: String
    Default: "10.1.6.0/24"
  AvailabilityZone1:
    Type: String
    Default: "us-east-1a"
  AvailabilityZone2:
    Type: String
    Default: "us-east-1b"
  AvailabilityZone3:
    Type: String
    Default: "us-east-1c"
  PublicRouteCidrBlock:
    Type: String
    Default: "0.0.0.0/0"
  AmiId:
    Type: String
    Default: "ami-033b95fb8079dc481"
  Environment:
    Type: String
    Default: "dev"
  DBName:
    Type: String
    Default: "csye6225"
  DBPassword:
    Type: String
    Default: "verybadpassword"
  InstanceKeyName:
    Type: String
    Default: "csye6225"
  CodeDeployS3BUCKET:
    Description: CodeDeploy S3 Bucket Name
    Type: String
    Default: codedeploy.url.something
  MySSLCert:
    Description: SSL Certificate ARN
    Type: String
    Default: arn:aws:acm:region:userId:certificate/certId


Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Ref Subnet1CidrBlock
      AvailabilityZone: !Ref AvailabilityZone1
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Ref Subnet2CidrBlock
      AvailabilityZone: !Ref AvailabilityZone2
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  Subnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: !Ref Subnet3CidrBlock
      AvailabilityZone: !Ref AvailabilityZone3
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  RDSSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: "false"
      CidrBlock: !Ref RDSSubnet1CidrBlock
      AvailabilityZone: !Ref AvailabilityZone1
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  RDSSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: "false"
      CidrBlock: !Ref RDSSubnet2CidrBlock
      AvailabilityZone: !Ref AvailabilityZone2
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  RDSSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      MapPublicIpOnLaunch: "false"
      CidrBlock: !Ref RDSSubnet3CidrBlock
      AvailabilityZone: !Ref AvailabilityZone3
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet1
      RouteTableId:
        Ref: RouteTable
  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet2
      RouteTableId:
        Ref: RouteTable
  Subnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: Subnet3
      RouteTableId:
        Ref: RouteTable
  Route:
    Type: AWS::EC2::Route
    DependsOn: InternetGateway
    Properties:
       RouteTableId:
         Ref: RouteTable
       DestinationCidrBlock: !Ref PublicRouteCidrBlock
       GatewayId:
         Ref: InternetGateway
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  RDSSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: RDSSubnet1
      RouteTableId:
        Ref: PrivateRouteTable
  RDSSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: RDSSubnet2
      RouteTableId:
        Ref: PrivateRouteTable
  RDSSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: RDSSubnet3
      RouteTableId:
        Ref: PrivateRouteTable
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Allow http to client host
        GroupName: application
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          Description: ssh
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref LBSecurityGroup
        - IpProtocol: tcp
          Description: ssh
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref LBSecurityGroup
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LBSecurityGroup
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LBSecurityGroup
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Security group for RDS instances
        GroupName: database
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup
  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
        GroupDescription: Security group for Load balancer to access the web
        GroupName: load balancer
        VpcId:
          Ref: VPC
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0
  ASGLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: "asg_launch_config"
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: t2.micro
        KeyName: !Ref InstanceKeyName
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          Groups: [!Ref EC2SecurityGroup]
          DeleteOnTermination: "true"
          DeviceIndex: "0"
        BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            VolumeType: "gp2"
            Encrypted: true
            KmsKeyId: !GetAtt EBSVolKey.Arn
            DeleteOnTermination: true
        UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash
              yum update -y
              mkdir -p /home/ec2-user/webservice
              wget https://truststore.pki.rds.amazonaws.com/us-east-1/us-east-1-bundle.pem -O /home/ec2-user/us-east-1-bundle.pem
              echo "DB_PORT=${RDSDBInstance.Endpoint.Port}" >| /home/ec2-user/webservice/.env
              echo "DB_USER=${DBName}" >> /home/ec2-user/webservice/.env
              echo "DB_PASS=${DBPassword}" >> /home/ec2-user/webservice/.env
              echo "DB_HOST=${RDSDBInstance.Endpoint.Address}" >> /home/ec2-user/webservice/.env
              echo "DB_NAME=${DBName}" >> /home/ec2-user/webservice/.env
              echo "ACCOUNT_ID=${AWS::AccountId}" >> /home/ec2-user/webservice/.env
              echo "DYNAMODB_TABLE=EmailVerificationTokenTTL" >> /home/ec2-user/webservice/.env
              echo "S3_BUCKETNAME=${S3BUCKET}" >> /home/ec2-user/webservice/.env
              echo "ROOT_CERT=/home/ec2-user/us-east-1-bundle.pem" >> /home/ec2-user/webservice/.env
              systemctl restart gowebapp
              /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/cloudwatch-config.json -s
  ASGWebApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: asg_launch_config
      AvailabilityZones:
        - !Ref AvailabilityZone1
        - !Ref AvailabilityZone2
        - !Ref AvailabilityZone3
      Cooldown: '120'
      DesiredCapacity: '1'
      HealthCheckGracePeriod: 90
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref ASGLaunchTemplate
        Version: !GetAtt ASGLaunchTemplate.LatestVersionNumber
      MaxSize: '5'
      MinSize: '1'
      Tags:
        - Key: Application
          Value: WebApp
          PropagateAtLaunch: "true"
        - Key: Name
          Value: !Sub ${AWS::StackName}-asg
          PropagateAtLaunch: "true"
      TargetGroupARNs:
        - !Ref LoadBalancerTargetGroup
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
  ASGCPUScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ASGWebApp
      AdjustmentType: "ChangeInCapacity"
      Cooldown: "120"
      ScalingAdjustment: 1
  ASGCPUScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ASGWebApp
      AdjustmentType: "ChangeInCapacity"
      Cooldown: "120"
      ScalingAdjustment: -1
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 5% for 60 Seconds
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 5.0
      AlarmActions: [!Ref ASGCPUScaleOutPolicy]
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref ASGWebApp
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 3% for 60 Seconds
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 3.0
      AlarmActions: [!Ref ASGCPUScaleInPolicy]
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref ASGWebApp
      ComparisonOperator: LessThanThreshold
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: InternetGateway
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Name: !Sub ${AWS::StackName}-load-balancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LBSecurityGroup
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
        - !Ref Subnet3
      Tags:
        - Key: Application
          Value: WebApp
        - Key: Name
          Value: !Sub ${AWS::StackName}-load-balancer
      Type: application
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 90
      HealthCheckPath: '/healthz'
      HealthCheckPort: '8080'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      HealthyThresholdCount: 2
      IpAddressType: ipv4
      Name: !Sub ${AWS::StackName}-lb-tg
      Port: 8080
      Protocol: 'HTTP'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-lb-tg
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '20'
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
      - CertificateArn: !Ref MySSLCert
  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${Environment}.olasunkanmi-olayinka.me.
      Comment: DNS name for my application load balancer
      Name: !Sub ${Environment}.olasunkanmi-olayinka.me.
      Type: A
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
  S3BUCKET:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties: 
      BucketName: !Join
      - ""
      - - !Select
          - 4
          - !Split
            - "-"
            - !Select
              - 2
              - !Split
                - "/"
                - !Ref AWS::StackId
        - "."
        - !Ref Environment
        - ".olasunkanmi-olayinka.me"
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
        - Id: MyRule
          Status: Enabled
          Transitions:
            - TransitionInDays: 30
              StorageClass: STANDARD_IA
  RDSDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "Subnet Group for RDS DB instances"
      DBSubnetGroupName: !Sub "${DBName}-subnet-group"
      SubnetIds:
      - !Ref RDSSubnet1
      - !Ref RDSSubnet2
      - !Ref RDSSubnet3
  RDSDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: MySQL Parameter Group
      Family: mysql8.0
      Parameters: 
        performance_schema: 1
  RDSDBInstance:
        Type: AWS::RDS::DBInstance
        Properties:
          DBParameterGroupName: !Ref RDSDBParameterGroup
          Engine: MySQL
          EngineVersion: 8.0.27
          DBInstanceClass: db.t3.micro
          AllocatedStorage: "20"
          StorageType: "gp2"
          MultiAZ: "false"
          DBInstanceIdentifier: !Ref DBName
          MasterUsername: !Ref DBName
          MasterUserPassword: !Ref DBPassword
          DBSubnetGroupName: !Ref RDSDBSubnetGroup
          PubliclyAccessible: "false"
          DBName: !Ref DBName
          VPCSecurityGroups: [!Ref RDSSecurityGroup]
          StorageEncrypted: true
          KmsKeyId: !Ref RDSInstKey
          DBParameterGroupName: !Ref RDSDBParameterGroup
  EC2S3Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: "WebAppS3"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
            - "s3:PutObject"
            - "s3:GetObject"
            - "s3:DeleteObject"
            Resource:
            - !Sub "arn:aws:s3:::${S3BUCKET}"
            - !Sub "arn:aws:s3:::${S3BUCKET}/*"
          - Effect: Allow
            Action:
            - "s3:GetObject"
            Resource:
            - !Sub "arn:aws:s3:::${CodeDeployS3BUCKET}"
            - !Sub "arn:aws:s3:::${CodeDeployS3BUCKET}/*"
      Roles:
      - !Ref EC2S3IAMRole
  EC2S3IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "EC2-CSYE6225"
      ManagedPolicyArns: 
      - "arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy"
      - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: ec2-instance-profile
      Path: /
      Roles: 
      - !Ref EC2S3IAMRole
  CodeDeployEC2ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployEC2ServiceRole
      Description: CodeDeployEC2ServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
  CSYE6225Webapp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: mywebapp
      ComputePlatform: Server
  CSYE6225WebappDeployment:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn:
    - ASGWebApp
    Properties:
      ApplicationName: mywebapp
      DeploymentGroupName: mywebapp
      ServiceRoleArn: !GetAtt CodeDeployEC2ServiceRole.Arn
      AutoScalingGroups:
      - asg_launch_config
      DeploymentStyle:
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      Ec2TagSet:
        Ec2TagSetList:
        - Ec2TagGroup:
          - Key: Application
            Value: WebApp
            Type: KEY_AND_VALUE
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties: 
      DisplayName: EmailVerificationTopic
      Subscription: 
        - Endpoint: !GetAtt LambdaFunction.Arn
          Protocol: lambda
      TopicName: EmailVerificationTopic
  SNSPolicy:
    Type: AWS::IAM::Policy
    DependsOn:
      - MySNSTopic
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "sns:ListTopics"
              - "sns:CreateTopic"
              - "sns:GetTopicAttributes"
              - "sns:Publish"
              - "sns:ConfirmSubscription"
            Resource:
              - !Ref MySNSTopic
      PolicyName: "SNSPolicy"
      Roles:
      - !Ref EC2S3IAMRole
  TokenDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: Email
          AttributeType: S
      KeySchema:
        - AttributeName: Email
          KeyType: HASH
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: EmailVerificationTokenTTL
      TimeToLiveSpecification: 
        AttributeName: TTL
        Enabled: true
  SentMailsDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties: 
      AttributeDefinitions: 
        - AttributeName: Email
          AttributeType: S
      KeySchema:
        - AttributeName: Email
          KeyType: HASH
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TableName: EmailVerificationSentMails
      TimeToLiveSpecification: 
        AttributeName: TTL
        Enabled: true
  LambdaSNSPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction.Arn
      Principal: sns.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Ref MySNSTopic
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      RoleName: lambda-execution-role
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        - "arn:aws:iam::aws:policy/AmazonSESFullAccess"
  LambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - LambdaExecutionRole
    Properties:
      Code:
        ZipFile: |
          import os
          import time
          import json
          import boto3
          from urllib import parse
          from botocore.exceptions import ClientError

          def my_handler(event, context):
              msg = event['Records'][0]['Sns']['Message']
              msg_json = json.loads(msg)
              email = msg_json['email']
              token = msg_json['token']
              msg_type = msg_json['message_type']
              print("email: ", email)
              print("token: ", token)
              print("message_type: ", msg_type)

              SUBJECT = "Verify your email address!!!"
              DOMAIN_NAME = os.environ.get('DomainName')
              SENDER = f'notification@{DOMAIN_NAME}'
              CHARSET = "UTF-8"
              BODY_HTML = f"""<html>
                  <head></head>
                  <body>
                  <h1>Verify Your Email Address</h1>
                  <p>To continue, please verify your email address by clicking the link below. This link is valid for 5 minutes.</p>
                  <p><a  href="https://{DOMAIN_NAME}/v1/verifyUserEmail?email={parse.quote(email)}&token={token}" target="_blank">Click here to verify email</a></p>
                  <p>Or paste the following link in a browser: </p>
                  <p>https://{DOMAIN_NAME}/v1/verifyUserEmail?email={parse.quote(email)}&token={token} </p>
                  </body>
                  </html>
              """

              dynamodb = boto3.resource('dynamodb')
              table = dynamodb.Table('EmailVerificationSentMails')
              try:
                  response = table.get_item(
                      Key={'Email': email})
                  if "Item" in response.keys():
                      print("User already exists")
                      print(response['Item'])
                      return "User already exists"
              except ClientError as e:
                  print(e.response['Error']['Message'])
                  return e.response['Error']['Message']

              try:
                  table.put_item(
                      Item={
                          'Email': email,
                          'TTL': int(time.time()) + 1800,})
                  print("Puting item in table")
              except ClientError as e:
                  print(e.response['Error']['Message'])
                  return e.response['Error']['Message']


              client = boto3.client('ses')

              try:
                  response = client.send_email(
                      Destination={
                          'ToAddresses': [
                              email,
                          ],
                      },
                      Message={
                          'Body': {
                              'Html': {
                                  'Charset': CHARSET,
                                  'Data': BODY_HTML,
                              },
                          },
                          'Subject': {
                              'Charset': CHARSET,
                              'Data': SUBJECT,
                          },
                      },
                      Source=SENDER,
                  )
              except ClientError as e:
                  print(e.response['Error']['Message'])
              else:
                  print("Email sent! Message ID:"),
                  print(response['MessageId'])
                  print("Meassage sent successfully")
                  return "Meassage sent successfully, message id: " + response['MessageId']
      Description: Lambda function for verification emails
      Environment:
        Variables:
          DomainName: !Sub '${Environment}.olasunkanmi-olayinka.me'
      FunctionName: EmailVerification
      Handler: index.my_handler
      MemorySize: 128
      PackageType: Zip
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 15
  EBSVolKey:
    Type: AWS::KMS::Key
    Properties: 
      Description: Customer Managed Key for EBS Volume
      Enabled: true
      PendingWindowInDays: 7
      KeyPolicy:
        Version: '2012-10-17'
        Id: ebs-key
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action: 'kms:*'
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS:
            - !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling
          Action:
            - kms:Encrypt
            - kms:Decrypt
            - kms:ReEncrypt*
            - kms:DescribeKey
            - kms:GenerateDataKey*
          Resource: '*'
        - Effect: Allow
          Principal:
            AWS:
            - !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling
          Action:
          - kms:CreateGrant
          Resource: '*'
          Condition:
            Bool:
              kms:GrantIsForAWSResource: true
  EBSVolKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/ebs-key
      TargetKeyId: !Ref EBSVolKey
  RDSInstKey:
    Type: AWS::KMS::Key
    Properties: 
      Description: Customer Managed Key for RDS Instance
      Enabled: true
      KeyPolicy:
        Version: '2012-10-17'
        Id: rds-key
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
          Action: 'kms:*'
          Resource: '*'
  RDSInsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/rds-key
      TargetKeyId: !Ref RDSInstKey

      
Outputs:
  VpcId:
    Description: The VPC ID
    Value: !Ref VPC
  Subnet1Id:
    Description: The Subnet 1 ID
    Value: !Ref Subnet1
  Subnet2Id:
    Description: The Subnet 2 ID
    Value: !Ref Subnet2
  Subnet3Id:
    Description: The Subnet 3 ID
    Value: !Ref Subnet3
  InternetGatewayId:
    Description: The Internet GateWay ID
    Value: !Ref InternetGateway
  RouteTableId:
    Description: The Route Table ID
    Value: !Ref RouteTable
  EC2SecurityGroupId:
    Description: The application security group ID
    Value: !Ref EC2SecurityGroup

  # EC2Instance: 
  #   Type: AWS::EC2::Instance
  #   Properties: 
  #     ImageId: !Ref AmiId
  #     InstanceType: t2.micro
  #     IamInstanceProfile: !Ref EC2InstanceProfile
  #     NetworkInterfaces: 
  #     - AssociatePublicIpAddress: "true"
  #       DeleteOnTermination: "true"
  #       SubnetId:
  #         Ref: Subnet1
  #       DeviceIndex: "0"
  #       GroupSet: [!Ref EC2SecurityGroup]
  #     BlockDeviceMappings: 
  #     - DeviceName: "/dev/xvda"
  #       Ebs: 
  #         VolumeType: "gp2"
  #         DeleteOnTermination: "true"
  #         VolumeSize: "20"
  #     UserData:
  #       Fn::Base64: 
  #         !Sub |
  #           #!/bin/bash
  #           yum update -y
  #           mkdir -p /home/ec2-user/webservice
  #           echo "DB_PORT=${RDSDBInstance.Endpoint.Port}" >| /home/ec2-user/webservice/.env
  #           echo "DB_USER=${DBName}" >> /home/ec2-user/webservice/.env
  #           echo "DB_PASS=${DBPassword}" >> /home/ec2-user/webservice/.env
  #           echo "DB_HOST=${RDSDBInstance.Endpoint.Address}" >> /home/ec2-user/webservice/.env
  #           echo "DB_NAME=${DBName}" >> /home/ec2-user/webservice/.env
  #           echo "S3_BUCKETNAME=${S3BUCKET}" >> /home/ec2-user/webservice/.env
  #           systemctl restart gowebapp

  # ASGCPUScaleOutPolicy:
  #   Type: AWS::AutoScaling::ScalingPolicy
  #   Properties:
  #     AutoScalingGroupName: !Ref ASGWebApp
  #     PolicyType: TargetTrackingScaling
  #     TargetTrackingConfiguration:
  #       PredefinedMetricSpecification:
  #         PredefinedMetricType: ASGAverageCPUUtilization
  #       TargetValue: 3.0
